# project-specific version for 12MHz external XTAL and PLL-init
# Martin Thomas 5/2010, based on the target-library cfg-file
 
# Use RCLK. If RCLK is not available fall back to 500kHz.
#
# Depending on cabling you might be able to eek this up to 2000kHz.
jtag_rclk 500

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME lpc2148
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

if { [info exists CPUTAPID ] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x4f1f0f0f
}

adapter_nsrst_delay 200
jtag_ntrst_delay 200

# NOTE!!! LPCs need reset pulled while RTCK is low. 0 to activate
# JTAG, power-on reset is not enough, i.e. you need to perform a
# reset before being able to talk to the LPC2148, attach is not possible.

reset_config trst_and_srst srst_pulls_trst

jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4

$_TARGETNAME configure -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0

# mthomas: enable PLL -> fpclk=60MHz - experimental!
proc read_register {register} {
	set result ""
	ocd_mem2array result 32 $register 1
	# mdw $register
	return $result(0)
}
proc lpc21xx_pll_init { } {
	echo "PLLinit"
	jtag_rclk 500
	##adapter_khz 500
	
	# PLLCON = 1;
	mww 0xE01FC080 1
	# VPBDIV = 1;
	mww 0xE01FC100 1
	# PLLCFG = ((Fcclk / Fosc) - 1) | (1 << 5);
	mww 0xE01FC084 0x24
	# PLLFEED = 0xaa;
	mww 0xE01FC08C 0xaa 
	# PLLFEED = 0x55;
	mww 0xE01FC08C 0x55
	# - wait pll lock
	# while ((PLLSTAT & (1 << 10)) == 0) { ; }
	while { [expr [read_register 0xE01FC088] & 0x400] == 0 } { sleep 1 }
	#sleep 10
	# PLLCON = 3;
	mww 0xE01FC080 3
	# PLLFEED = 0xaa;
	mww 0xE01FC08C 0xaa
	# PLLFEED = 0x55;
	mww 0xE01FC08C 0x55
	
	jtag_rclk 5000
	##	adapter_khz 5000
}
#mthomas end

$_TARGETNAME configure -event reset-init {
	# Force target into ARM state
	arm core_state arm

	# Do not remap 0x0000-0x0020 to anything but the flash (i.e. select
	# "User Flash Mode" where interrupt vectors are _not_ remapped,
	# and reside in flash instead).
	#
	# See section 7.1 on page 32 ("Memory Mapping control register") in
	# "UM10139: Volume 1: LPC214x User Manual", Rev. 02 -- 25 July 2006.
	# http://www.standardics.nxp.com/support/documents/microcontrollers/pdf/user.manual.lpc2141.lpc2142.lpc2144.lpc2146.lpc2148.pdf
	mww 0xE01FC040 0x01
	
	# mthomas: Init PLL - experimental!
	# Comment the following line if there are problems
	lpc21xx_pll_init
}

# flash bank lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc_checksum]
set _FLASHNAME $_CHIPNAME.flash
#flash bank $_FLASHNAME lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 14765 calc_checksum
## mthomas: use the following line if lpc21xx_pll_init is not called:
#flash bank $_FLASHNAME lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 12000 calc_checksum
## mthomas: use the following line if lpc21xx_pll_init is called by reset-init
flash bank $_FLASHNAME lpc2000 0x0 0x7d000 0 0 $_TARGETNAME lpc2000_v2 60000 calc_checksum
