<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\RTC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\RTC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sun Jan 02 07:21:23 2011
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; display_rtc_time &rArr; lcd_line_clear &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c47658]">Reset_Handler</a>
 <LI><a href="#[c478b0]">Undef_Handler</a>
 <LI><a href="#[c47874]">SWI_Handler</a>
 <LI><a href="#[c47838]">PAbt_Handler</a>
 <LI><a href="#[c477fc]">DAbt_Handler</a>
 <LI><a href="#[c477c0]">IRQ_Handler</a>
 <LI><a href="#[c47784]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c478b0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c478b0]">Undef_Handler</a><BR>
 <LI><a href="#[c47874]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c47874]">SWI_Handler</a><BR>
 <LI><a href="#[c47838]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c47838]">PAbt_Handler</a><BR>
 <LI><a href="#[c477fc]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c477fc]">DAbt_Handler</a><BR>
 <LI><a href="#[c477c0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c477c0]">IRQ_Handler</a><BR>
 <LI><a href="#[c47784]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c47784]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c47658]">Reset_Handler</a>
 <LI><a href="#[c478b0]">Undef_Handler</a>
 <LI><a href="#[c47874]">SWI_Handler</a>
 <LI><a href="#[c47838]">PAbt_Handler</a>
 <LI><a href="#[c477fc]">DAbt_Handler</a>
 <LI><a href="#[c477c0]">IRQ_Handler</a>
 <LI><a href="#[c47784]">FIQ_Handler</a>
 <LI><a href="#[c455c4]">__main</a>
 <LI><a href="#[c467d0]">main</a>
 <LI><a href="#[c4347c]">_sputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c47658]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c455c4]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[c3b808]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c3b718]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c3ab24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c3b6dc]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c3ab24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c3b5ec]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[c468c0]"></a>s_memset</STRONG> (ARM, 40 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = s_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c46848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rtc
</UL>

<P><STRONG><a name="[c46884]"></a>wait</STRONG> (ARM, 28 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[c46848]"></a>test_rtc</STRONG> (ARM, 104 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = test_rtc &rArr; ds1307_set &rArr; ds1307_wr_regs &rArr; i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c46668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
<LI><a href="#[c466a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
<LI><a href="#[c468c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c467d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4680c]"></a>display_rtc_time</STRONG> (ARM, 168 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = display_rtc_time &rArr; lcd_line_clear &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c431ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c46578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[c465b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_line_clear
<LI><a href="#[c466a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c467d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c467d0]"></a>main</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main &rArr; display_rtc_time &rArr; lcd_line_clear &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c465f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[c4680c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc_time
<LI><a href="#[c46848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[c45fd8]"></a>i2c_lpc_init</STRONG> (ARM, 128 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c46668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
<LI><a href="#[c466a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>

<P><STRONG><a name="[c45f9c]"></a>m24xx_write</STRONG> (ARM, 304 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c452b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[c461b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_page_size
</UL>

<P><STRONG><a name="[c45f60]"></a>m24xx_read</STRONG> (ARM, 296 bytes, Stack size 56 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_set_addr
<LI><a href="#[c461b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_page_size
<LI><a href="#[c46230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[c45f24]"></a>lm75_read16</STRONG> (ARM, 216 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c46104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[c46230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c45df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_get_temp
</UL>

<P><STRONG><a name="[c45ee8]"></a>lm75_read_cfg</STRONG> (ARM, 188 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c46104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[c46230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[c45eac]"></a>lm75_write16</STRONG> (ARM, 136 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c46104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[c45e70]"></a>lm75_write_cfg</STRONG> (ARM, 120 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c46104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c45e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_init
</UL>

<P><STRONG><a name="[c45e34]"></a>lm75_init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c45e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
</UL>

<P><STRONG><a name="[c45df8]"></a>lm75_get_temp</STRONG> (ARM, 36 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
</UL>

<P><STRONG><a name="[c45dbc]"></a>pca9555_write</STRONG> (ARM, 84 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[c45d80]"></a>pca9555_read</STRONG> (ARM, 148 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c46230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[c45d44]"></a>ds1307_toBCD</STRONG> (ARM, 64 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c46668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
</UL>

<P><STRONG><a name="[c45d08]"></a>ds1307_fromBCD</STRONG> (ARM, 32 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c466a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>

<P><STRONG><a name="[c45ccc]"></a>ds1307_wr_regs</STRONG> (ARM, 104 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ds1307_wr_regs &rArr; i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c46668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
</UL>

<P><STRONG><a name="[c46668]"></a>ds1307_set</STRONG> (ARM, 164 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ds1307_set &rArr; ds1307_wr_regs &rArr; i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c45ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[c45d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_toBCD
<LI><a href="#[c45fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c46848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rtc
</UL>

<P><STRONG><a name="[c45c90]"></a>ds1307_rd_regs</STRONG> (ARM, 116 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ds1307_rd_regs &rArr; i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c46230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c466a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>

<P><STRONG><a name="[c466a4]"></a>ds1307_get</STRONG> (ARM, 204 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ds1307_get &rArr; ds1307_rd_regs &rArr; i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c45c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[c45d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_fromBCD
<LI><a href="#[c45fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4680c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc_time
<LI><a href="#[c46848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rtc
</UL>

<P><STRONG><a name="[c458d0]"></a>delay</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c45858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[c45894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[c45894]"></a>wait_lcd</STRONG> (ARM, 108 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c458d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c457e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[c45858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[c45858]"></a>lcd_command_write</STRONG> (ARM, 212 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[c458d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c45768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[c465f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[c4581c]"></a>set_lcd_port_output</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[c465f0]"></a>lcd_clear</STRONG> (ARM, 16 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clear &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[c467d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c457e0]"></a>lcd_data_write</STRONG> (ARM, 160 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[c457a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[c457a4]"></a>lcd_putchar</STRONG> (ARM, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c457e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c46578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[c45768]"></a>lcd_gotoxy</STRONG> (ARM, 92 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c46578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[c46578]"></a>lcd_putstring</STRONG> (ARM, 76 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[c457a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c465b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_line_clear
<LI><a href="#[c4662c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[c4680c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc_time
</UL>

<P><STRONG><a name="[c465b4]"></a>lcd_line_clear</STRONG> (ARM, 68 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_line_clear &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c46578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>
<BR>[Called By]<UL><LI><a href="#[c4680c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc_time
</UL>

<P><STRONG><a name="[c4572c]"></a>lcd_backlight_on</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[c456f0]"></a>turn_off_lcd_back_light_cb</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[c4662c]"></a>init_lcd</STRONG> (ARM, 96 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_lcd &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[c45768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[c4581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_output
<LI><a href="#[c45858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[c458d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c46578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[c465f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c467d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c452f4]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[c452b8]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3b2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c45f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>

<P><STRONG><a name="[c3b2e0]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c3b2a4]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c434f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c452b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[c3ab24]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3b6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c3b718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c3aae8]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c43224]"></a>__0sprintf$1</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c434f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c431e8]"></a>__1sprintf$1</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[c431ac]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4680c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rtc_time
</UL>

<P><STRONG><a name="[c3a368]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3a368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c3a32c]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c3a2f0]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c478b0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c478b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c478b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c47874]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c47874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c47874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c47838]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c47838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c47838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c477fc]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c477fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c477fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c477c0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c477c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c477c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c47784]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c47784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c47784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c462e4]"></a>i2c_lpc_wr_byte</STRONG> (ARM, 40 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c45c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[c45ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[c45d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[c45dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[c45e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[c45eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[c45ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
</UL>

<P><STRONG><a name="[c462a8]"></a>i2c_lpc_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c45c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[c45ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[c45d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[c45dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[c45e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[c45eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[c45ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
</UL>

<P><STRONG><a name="[c4626c]"></a>i2c_lpc_ctrl</STRONG> (ARM, 148 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c45c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[c45ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[c45d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[c45dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[c45e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[c45eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[c45ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
</UL>

<P><STRONG><a name="[c46230]"></a>i2c_lpc_rx_to_buf</STRONG> (ARM, 248 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c45c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[c45d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[c45ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[c461f4]"></a>i2c_lpc_ask_polling_op</STRONG> (ARM, 160 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
</UL>

<P><STRONG><a name="[c461b8]"></a>m24xx_page_size</STRONG> (ARM, 344 bytes, Stack size 4 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[c45f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>

<P><STRONG><a name="[c4617c]"></a>m24xx_set_addr</STRONG> (ARM, 404 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c45f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[c46140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
</UL>

<P><STRONG><a name="[c46140]"></a>i2c_lpc_m24xx_wr</STRONG> (ARM, 196 bytes, Stack size 48 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_set_addr
<LI><a href="#[c461f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ask_polling_op
<LI><a href="#[c4626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[c462a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[c462e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c45f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>

<P><STRONG><a name="[c46104]"></a>lm75_set_addr</STRONG> (ARM, 160 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c45e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[c45eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[c45ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[c45f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
</UL>

<P><STRONG><a name="[c434f4]"></a>_printf_core</STRONG> (ARM, 504 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3b2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c43224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[c4347c]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c43224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
